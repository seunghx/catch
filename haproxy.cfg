# 전역 옵션 
global
        log /dev/log    local0
        log /dev/log    local1 notice
        # 로그 파일 루트 위치
        chroot /var/lib/haproxy
        # 백그라운드에서 실행
        daemon

# 기본 옵션
defaults
        log     global
        mode    http
        option  httplog
        # null : connection on which no data has been transferred.
        option  dontlognull
        option  forwardfor
        option  log-health-checks
        timeout connect 5000
        timeout client  50000
        timeout server  50000

        # 응답 코드에 따른 에러 파일 위치 
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# statistics report
listen stats
        bind *:9999
        stats enable
        stats hide-version
        # statistic page url 
        stats uri /stats
        stats auth id:password

# 프론트엔드 설정
frontend catchApp
        bind *:80
        option httplog
        default_backend catchBackend

# 백엔드 설정
backend catchBackend
        # roundrobin(순환) 방식 분배
        balance roundrobin	

        # (리버스 프록시 서버 정보가 아닌) 실제 클라이언트 정보 전달 in X-Forward-For 헤더
        option forwardfor  

        # application session cookie 사용 - SESSION : 스프링 세션에서 생성하는 세션 네임. 
        cookie SESSION prefix nocache	
       
        #
        # example : host : 13.209.234.xx, port : 8080
        # check : health check
        #	  
        # cookie XXX : haproxy에 의해 세션 쿠키(앞-prefix)에 XXX 삽입
        # so sticky session is enabled.
        #
        # 세션 서버(redis)를 따로 두어 sticky session이 꼭 필요한 상황은 아니며, catch application에서 채팅 등에 
        # 사용되는 websocket(STOMP) 연결은 유지되기 때문에 sticky session이 필요하지는 않다. 다만, 
        # catch application의 stage의 기능이 고도화되면 네트워크 등의 문제로 websocket connection이 끊어질 때
        # 동일 서버 노드와 재연결할 필요가 있을 때 아래 sticky session 설정이 사용될 수 있다. 
        #
	server catchServer1 host1:port1  check cookie catchServer1 
   	server catchServer2 host2:port2  check cookie catchServer2



